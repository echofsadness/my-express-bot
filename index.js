import { Client, GatewayIntentBits, SlashCommandBuilder, REST, Routes, Events } from 'discord.js';
import dotenv from 'dotenv';
import { chromium } from 'playwright';
import noblox from 'noblox.js';

dotenv.config();

const client = new Client({
  intents: [GatewayIntentBits.Guilds]
});

let robloxToken = null;

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô Roblox ‡∏î‡πâ‡∏ß‡∏¢ Playwright ‡πÅ‡∏•‡∏∞‡∏î‡∏∂‡∏á cookie .ROBLOSECURITY
async function loginToRoblox() {
  const browser = await chromium.launch({
    headless: true,
    args: ['--no-sandbox', '--disable-setuid-sandbox']
  });
  const context = await browser.newContext();
  const page = await context.newPage();

  await page.goto('https://www.roblox.com/login');

  // ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å .env
  await page.fill('#login-username', process.env.ROBLOX_USER);
  await page.fill('#login-password', process.env.ROBLOX_PASS);
  await page.click('#login-button');

  // ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤ home (‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô URL)
  await page.waitForURL('**/home', { timeout: 15000 });

  // ‡∏î‡∏∂‡∏á cookie .ROBLOSECURITY
  const cookies = await context.cookies();
  const roblosecurity = cookies.find(c => c.name === '.ROBLOSECURITY');
  robloxToken = roblosecurity?.value;

  await browser.close();

  if (!robloxToken) throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö .ROBLOSECURITY ‡∏´‡∏•‡∏±‡∏á‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô');

  console.log('‚úÖ Logged into Roblox and got .ROBLOSECURITY cookie.');
}

// ‡∏™‡∏£‡πâ‡∏≤‡∏á Slash commands
const commands = [
  new SlashCommandBuilder()
    .setName('promote')
    .setDescription('Promote user in the Roblox group')
    .addStringOption(option =>
      option.setName('username')
        .setDescription('Roblox username')
        .setRequired(true)
    ),
  new SlashCommandBuilder()
    .setName('demote')
    .setDescription('Demote user in the Roblox group')
    .addStringOption(option =>
      option.setName('username')
        .setDescription('Roblox username')
        .setRequired(true)
    ),
].map(cmd => cmd.toJSON());

// ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô Slash commands ‡∏Å‡∏±‡∏ö Discord API
const rest = new REST({ version: '10' }).setToken(process.env.TOKEN);

(async () => {
  try {
    await rest.put(
      Routes.applicationCommands(process.env.CLIENT_ID),
      { body: commands }
    );
    console.log('‚úÖ Registered Slash commands.');
  } catch (error) {
    console.error('‚ùå Error registering commands:', error);
  }
})();

// ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ö‡∏≠‡∏ó‡∏û‡∏£‡πâ‡∏≠‡∏° ‡πÉ‡∏´‡πâ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô Roblox ‡∏ú‡πà‡∏≤‡∏ô Playwright ‡πÅ‡∏•‡πâ‡∏ß‡∏ï‡∏±‡πâ‡∏á Noblox.js cookie
client.once(Events.ClientReady, async () => {
  console.log(`ü§ñ Logged in as ${client.user.tag}`);

  try {
    await loginToRoblox();
    await noblox.setCookie(robloxToken);
    console.log('üîì Logged into Roblox via Noblox.js');
  } catch (error) {
    console.error('‚ùå Roblox login failed:', error.message);
  }
});

// ‡∏£‡∏±‡∏ö event interaction
client.on(Events.InteractionCreate, async interaction => {
  if (!interaction.isChatInputCommand()) return;

  const username = interaction.options.getString('username');
  let userId;
  try {
    userId = await noblox.getIdFromUsername(username);
  } catch {
    return interaction.reply({ content: `‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö username: ${username}`, ephemeral: true });
  }

  try {
    let result;
    if (interaction.commandName === 'promote') {
      result = await noblox.promote(process.env.GROUP_ID, userId);
      return interaction.reply(`‚úÖ Promoted **${username}** to **${result.newRole.name}**`);
    } else if (interaction.commandName === 'demote') {
      result = await noblox.demote(process.env.GROUP_ID, userId);
      return interaction.reply(`‚úÖ Demoted **${username}** to **${result.newRole.name}**`);
    }
  } catch (error) {
    console.error(error);
    return interaction.reply({ content: '‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ ‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠', ephemeral: true });
  }
});

client.login(process.env.TOKEN);
